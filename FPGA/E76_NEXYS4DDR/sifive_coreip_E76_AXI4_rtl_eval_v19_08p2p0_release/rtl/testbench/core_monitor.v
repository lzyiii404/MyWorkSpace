//
// Copyright (c) 2016-2019 SiFive, Inc. -- Proprietary and Confidential
// All Rights Reserved.
//
// NOTICE: All information contained herein is, and remains the
// property of SiFive, Inc. The intellectual and technical concepts
// contained herein are proprietary to SiFive, Inc. and may be covered
// by U.S. and Foreign Patents, patents in process, and are protected by
// trade secret or copyright law.
//
// This work may not be copied, modified, re-published, uploaded,
// executed, or distributed in any way, in any medium, whether in whole
// or in part, without prior written permission from SiFive, Inc.
//
// The copyright notice above does not evidence any actual or intended
// publication or disclosure of this source code, which includes
// information that is confidential and/or proprietary, and is a trade
// secret, of SiFive, Inc.
//
// Instance ID: 00000000-0000-0000-0000-0000000000000, 00000000-0000-0000-0000-0000000000000, 00000000-0000-0000-0000-0000000000000

// VCS coverage exclude_file
// Autogenerated DPI Bundle monitor

// foreign export ccall __core_monitor :: CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> IO ()
// __core_monitor :: CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> CULong -> IO ()
// core_monitor inst rd1val rd1src rd0val rd0src wren wrdata wrdst pc valid timer hartid = return ()

// void core_monitor(size_t inst, size_t rd1val, size_t rd1src, size_t rd0val, size_t rd0src, size_t wren, size_t wrdata, size_t wrdst, size_t pc, size_t valid, size_t timer, size_t hartid);
// core_monitor(inst, rd1val, rd1src, rd0val, rd0src, wren, wrdata, wrdst, pc, valid, timer, hartid);

module core_monitor (
    input [31:0] m_0_inst, input [31:0] m_0_rd1val, input [4:0] m_0_rd1src, input [31:0] m_0_rd0val, input [4:0] m_0_rd0src, input [0:0] m_0_wren, input [31:0] m_0_wrdata, input [4:0] m_0_wrdst, input [31:0] m_0_pc, input [0:0] m_0_valid, input [31:0] m_0_timer, input [31:0] m_0_hartid, input [0:0] m_0_reset, input [0:0] m_0_clock,
    input [31:0] m_1_inst, input [31:0] m_1_rd1val, input [4:0] m_1_rd1src, input [31:0] m_1_rd0val, input [4:0] m_1_rd0src, input [0:0] m_1_wren, input [31:0] m_1_wrdata, input [4:0] m_1_wrdst, input [31:0] m_1_pc, input [0:0] m_1_valid, input [31:0] m_1_timer, input [31:0] m_1_hartid, input [0:0] m_1_reset, input [0:0] m_1_clock);
`ifdef USE_DPI
`ifndef SYNTHESIS
    import "DPI-C" context function void core_monitor(input longint m_inst, input longint m_rd1val, input longint m_rd1src, input longint m_rd0val, input longint m_rd0src, input longint m_wren, input longint m_wrdata, input longint m_wrdst, input longint m_pc, input longint m_valid, input longint m_timer, input longint m_hartid);
    reg m_0_ticked = 1'b0;
    always @(posedge m_0_clock) if (!m_0_reset) begin
       core_monitor(m_0_inst, m_0_rd1val, m_0_rd1src, m_0_rd0val, m_0_rd0src, m_0_wren, m_0_wrdata, m_0_wrdst, m_0_pc, m_0_valid, m_0_timer, m_0_hartid);
       m_0_ticked = 1'b1;
    end
    always @(negedge m_0_clock) m_0_ticked = 1'b0;

    always @(posedge m_1_clock) if (!m_1_reset) begin
       while ((m_0_hartid === m_1_hartid) && !m_0_ticked);
       core_monitor(m_1_inst, m_1_rd1val, m_1_rd1src, m_1_rd0val, m_1_rd0src, m_1_wren, m_1_wrdata, m_1_wrdst, m_1_pc, m_1_valid, m_1_timer, m_1_hartid);
    end

`endif
`endif
endmodule