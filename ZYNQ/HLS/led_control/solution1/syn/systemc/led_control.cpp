// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "led_control.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic led_control::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<2> led_control::ap_ST_fsm_state1 = "1";
const sc_lv<2> led_control::ap_ST_fsm_state2 = "10";
const sc_lv<32> led_control::ap_const_lv32_1 = "1";
const sc_lv<26> led_control::ap_const_lv26_0 = "00000000000000000000000000";
const sc_lv<32> led_control::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> led_control::ap_const_lv1_0 = "0";
const sc_lv<26> led_control::ap_const_lv26_2FAF080 = "10111110101111000010000000";
const sc_lv<26> led_control::ap_const_lv26_1 = "1";
const sc_lv<26> led_control::ap_const_lv26_17D783F = "1011111010111100000111111";
const sc_lv<1> led_control::ap_const_lv1_1 = "1";
const sc_logic led_control::ap_const_logic_0 = sc_dt::Log_0;
const bool led_control::ap_const_boolean_1 = true;

led_control::led_control(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_exitcond_fu_50_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_39 );

    SC_METHOD(thread_i_1_fu_56_p2);
    sensitive << ( i_reg_39 );

    SC_METHOD(thread_led_V);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_39 );
    sensitive << ( exitcond_fu_50_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_50_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "led_control_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, led_V, "(port)led_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, i_1_fu_56_p2, "i_1_fu_56_p2");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_reg_39, "i_reg_39");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, exitcond_fu_50_p2, "exitcond_fu_50_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("led_control.hdltvin.dat");
    mHdltvoutHandle.open("led_control.hdltvout.dat");
}

led_control::~led_control() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void led_control::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_50_p2.read(), ap_const_lv1_0))) {
        i_reg_39 = i_1_fu_56_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_reg_39 = ap_const_lv26_0;
    }
}

void led_control::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void led_control::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void led_control::thread_exitcond_fu_50_p2() {
    exitcond_fu_50_p2 = (!i_reg_39.read().is_01() || !ap_const_lv26_2FAF080.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_39.read() == ap_const_lv26_2FAF080);
}

void led_control::thread_i_1_fu_56_p2() {
    i_1_fu_56_p2 = (!i_reg_39.read().is_01() || !ap_const_lv26_1.is_01())? sc_lv<26>(): (sc_biguint<26>(i_reg_39.read()) + sc_biguint<26>(ap_const_lv26_1));
}

void led_control::thread_led_V() {
    led_V = (!i_reg_39.read().is_01() || !ap_const_lv26_17D783F.is_01())? sc_lv<1>(): (sc_biguint<26>(i_reg_39.read()) > sc_biguint<26>(ap_const_lv26_17D783F));
}

void led_control::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_50_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void led_control::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"led_V\" :  \"" << led_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

