// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "led_state.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic led_state::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<2> led_state::ap_ST_fsm_state1 = "1";
const sc_lv<2> led_state::ap_ST_fsm_state2 = "10";
const int led_state::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> led_state::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> led_state::ap_const_lv32_1 = "1";
const sc_lv<31> led_state::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> led_state::ap_const_lv1_1 = "1";
const sc_lv<31> led_state::ap_const_lv31_1 = "1";
const sc_lv<1> led_state::ap_const_lv1_0 = "0";
const sc_logic led_state::ap_const_logic_0 = sc_dt::Log_0;
const bool led_state::ap_const_boolean_1 = true;

led_state::led_state(sc_module_name name) : sc_module(name), mVcdFile(0) {
    led_state_AXILiteS_s_axi_U = new led_state_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("led_state_AXILiteS_s_axi_U");
    led_state_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    led_state_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    led_state_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    led_state_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    led_state_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    led_state_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    led_state_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    led_state_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    led_state_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    led_state_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    led_state_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    led_state_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    led_state_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    led_state_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    led_state_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    led_state_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    led_state_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    led_state_AXILiteS_s_axi_U->ACLK(ap_clk);
    led_state_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    led_state_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    led_state_AXILiteS_s_axi_U->total_cnt(total_cnt);
    led_state_AXILiteS_s_axi_U->high_cnt(high_cnt);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_i_1_fu_71_p2);
    sensitive << ( i_reg_51 );

    SC_METHOD(thread_i_cast_fu_62_p1);
    sensitive << ( i_reg_51 );

    SC_METHOD(thread_led_V);
    sensitive << ( high_cnt_read_reg_83 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_66_p2 );
    sensitive << ( i_cast_fu_62_p1 );

    SC_METHOD(thread_tmp_fu_66_p2);
    sensitive << ( total_cnt_read_reg_88 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_fu_62_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_66_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "led_state_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, led_V, "(port)led_V");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, total_cnt, "total_cnt");
    sc_trace(mVcdFile, high_cnt, "high_cnt");
    sc_trace(mVcdFile, high_cnt_read_reg_83, "high_cnt_read_reg_83");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, total_cnt_read_reg_88, "total_cnt_read_reg_88");
    sc_trace(mVcdFile, i_1_fu_71_p2, "i_1_fu_71_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_reg_51, "i_reg_51");
    sc_trace(mVcdFile, tmp_fu_66_p2, "tmp_fu_66_p2");
    sc_trace(mVcdFile, i_cast_fu_62_p1, "i_cast_fu_62_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("led_state.hdltvin.dat");
    mHdltvoutHandle.open("led_state.hdltvout.dat");
}

led_state::~led_state() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete led_state_AXILiteS_s_axi_U;
}

void led_state::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void led_state::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_66_p2.read(), ap_const_lv1_1))) {
        i_reg_51 = i_1_fu_71_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_reg_51 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        high_cnt_read_reg_83 = high_cnt.read();
        total_cnt_read_reg_88 = total_cnt.read();
    }
}

void led_state::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void led_state::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void led_state::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void led_state::thread_i_1_fu_71_p2() {
    i_1_fu_71_p2 = (!i_reg_51.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_51.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void led_state::thread_i_cast_fu_62_p1() {
    i_cast_fu_62_p1 = esl_zext<32,31>(i_reg_51.read());
}

void led_state::thread_led_V() {
    led_V = (!i_cast_fu_62_p1.read().is_01() || !high_cnt_read_reg_83.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_62_p1.read()) < sc_bigint<32>(high_cnt_read_reg_83.read()));
}

void led_state::thread_tmp_fu_66_p2() {
    tmp_fu_66_p2 = (!i_cast_fu_62_p1.read().is_01() || !total_cnt_read_reg_88.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_62_p1.read()) < sc_bigint<32>(total_cnt_read_reg_88.read()));
}

void led_state::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_66_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void led_state::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"led_V\" :  \"" << led_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

